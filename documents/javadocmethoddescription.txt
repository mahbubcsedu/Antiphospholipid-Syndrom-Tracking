/**
          * Sorts the specified list into ascending order, according to the
          * {@linkplain Comparable natural ordering} of its elements.
          * All elements in the list must implement the {@link Comparable}
          * interface.  Furthermore, all elements in the list must be
          * <i>mutually comparable</i> (that is, {@code e1.compareTo(e2)}
          * must not throw a {@code ClassCastException} for any elements
          * {@code e1} and {@code e2} in the list).
          *
          * <p>This sort is guaranteed to be <i>stable</i>:  equal elements will
          * not be reordered as a result of the sort.
          *
          * <p>The specified list must be modifiable, but need not be resizable.
          *
          * <p>Implementation note: This implementation is a stable, adaptive,
          * iterative mergesort that requires far fewer than n lg(n) comparisons
          * when the input array is partially sorted, while offering the
          * performance of a traditional mergesort when the input array is
          * randomly ordered.  If the input array is nearly sorted, the
          * implementation requires approximately n comparisons.  Temporary
          * storage requirements vary from a small constant for nearly sorted
          * input arrays to n/2 object references for randomly ordered input
          * arrays.
          *
          * <p>The implementation takes equal advantage of ascending and
          * descending order in its input array, and can take advantage of
          * ascending and descending order in different parts of the same
          * input array.  It is well-suited to merging two or more sorted arrays:
          * simply concatenate the arrays and sort the resulting array.
          *
          * <p>The implementation was adapted from Time Peters's list sort for Python
          * (<a href="http://svn.python.org/projects/python/trunk/Objects/listsort.txt">
          * TimSort</a>).  It uses techniques from Peter McIlroy's "Optimistic
          * Sorting and Information Theoretic Complexity", in Proceedings of the
          * Fourth Annual ACM-SIAM Symposium on Discrete Algorithms, pp 467-474,
          * January 1993.
          *
          * <p>This implementation dumps the specified list into an array, sorts
          * the array, and iterates over the list resetting each element
          * from the corresponding position in the array.  This avoids the
          * n<sup>2</sup> log(n) performance that would result from attempting
          * to sort a linked list in place.
          *
          * @param  list the list to be sorted.
          * @throws ClassCastException if the list contains elements that are not
          *         <i>mutually comparable</i> (for example, strings and integers).
          * @throws UnsupportedOperationException if the specified list's
          *         list-iterator does not support the {@code set} operation.
          * @throws IllegalArgumentException (optional) if the implementation
          *         detects that the natural ordering of the list elements is
          *         found to violate the {@link Comparable} contract
          */